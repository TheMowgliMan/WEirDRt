[gd_resource type="VisualShader" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
output_port_for_preview = 0
uniform_name = "Texture"

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
output_port_for_preview = 0
uniform_name = "TextureMult"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
output_port_for_preview = 0
operator = 2

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D Texture;
uniform sampler2D TextureMult;



void vertex() {
// Output:0

}

void fragment() {
// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(Texture, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture(TextureMult, UV.xy);
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}

// VectorOp:4
	vec3 n_out4p0 = n_out2p0 * n_out3p0;

// Output:0
	ALBEDO = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 0, 315.667 )
nodes/fragment/0/position = Vector2( 780, 340 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 180, 280 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 180, 500 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 500, 420 )
nodes/fragment/connections = PoolIntArray( 4, 0, 0, 0, 2, 0, 4, 0, 3, 0, 4, 1 )
